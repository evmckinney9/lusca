# replot_timeseries_demo.py — auto-generated by %%mplfreeze
import os
from pathlib import Path
import numpy as np, matplotlib.pyplot as plt
import lusca

HERE = Path(__file__).parent
NPZ  = HERE / "timeseries_demo.npz"

def main():
    os.chdir(HERE)
    data = np.load(NPZ)
    t = data['t']
    y = data['y']
    mavg = data['mavg']
    evt_a = data['evt_a']
    evt_b = data['evt_b']
    freq = data['freq']
    Pxx = data['Pxx']

    # ---- begin captured plotting cell ----
    with plt.style.context("lusca"):
        fig = plt.figure(figsize=(7.0, 4.6), constrained_layout=True)
        gs = fig.add_gridspec(nrows=2, ncols=1, height_ratios=[2.0, 1.4])

        ax = fig.add_subplot(gs[0, 0])
        ax2 = ax.twinx()
        axsp = fig.add_subplot(gs[1, 0])

        # main series
        (l_y,) = ax.plot(t, y, lw=1.1, label="signal")
        (l_ma,) = ax.plot(t, mavg, lw=2.0, label="moving avg")

        # envelope proxy (downsampled abs for cleanliness)
        step = 25
        env_t = t[::step]
        env = np.maximum.reduceat(np.abs(y), np.arange(0, y.size, step))
        (l_env,) = ax2.plot(env_t, env, ":", lw=1.2, label="envelope")

        # event shading (no labels)
        ax.axvspan(*evt_a, color="k", alpha=0.08)
        ax.axvspan(*evt_b, color="k", alpha=0.08)

        ax.set_ylabel("amplitude")
        ax2.set_ylabel("envelope")

        # spectrum (log–log, clean grid)
        axsp.loglog(freq[1:], Pxx[1:], lw=1.1)
        axsp.set_xlabel("frequency [Hz]")
        axsp.set_ylabel("power")
        axsp.grid(True, which="both", ls=":", alpha=0.4)

        # single, unobtrusive legend (top-right of upper panel)
        ax.legend(handles=[l_y, l_ma, l_env], loc="upper right", frameon=False)
        plt.show()
    # ---- end captured plotting cell ----

if __name__ == "__main__":
    main()
