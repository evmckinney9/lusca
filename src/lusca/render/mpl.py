"""Jupyter magic for freezing matplotlib plots, saving data and generating reproducible scripts.

This module provides the %%mplfreeze magic command for Jupyter/IPython, which captures
plotting cells, saves specified variables to compressed NPZ files, exports figures in
multiple formats, and generates standalone replot scripts for reproducibility.
"""

from __future__ import annotations

import argparse
import logging
import shlex
import textwrap
from datetime import datetime
from pathlib import Path

import numpy as np


# ---- parse: %%mplfreeze <name> [vars ...] [--outdir DIR] ----
def _parse_line(line: str):
    p = argparse.ArgumentParser(prog="%%mplfreeze", add_help=False)
    p.add_argument("name", help="Base name for outputs (folder + files)")
    p.add_argument("vars", nargs="*", help="Variable names to save into the NPZ")
    p.add_argument("--outdir", default="docs/figs", help="Parent output directory")
    a = p.parse_args(shlex.split(line))
    return a.name, a.vars, a.outdir


def _save_npz(path: Path, ns: dict, varnames: list[str]) -> None:
    arrays = {}
    for v in varnames:
        if v not in ns:
            raise RuntimeError(
                f"[mplfreeze] Variable '{v}' not found in the notebook namespace."
            )
        arrays[v] = np.asarray(ns[v])
    if not arrays:
        raise RuntimeError(
            "[mplfreeze] No variables provided. Use: %%mplfreeze name x y ..."
        )
    np.savez_compressed(path, **arrays)


def _write_replot(root: Path, cell_src: str, base: str, varnames: list[str]) -> None:
    # explicit local bindings: x = data["x"], ...
    binds = "\n".join([f"    {v} = data[{v!r}]" for v in varnames])
    code = f'''# replot_{base}.py — auto-generated by %%mplfreeze
import os
from pathlib import Path
import numpy as np, matplotlib.pyplot as plt

HERE = Path(__file__).parent
NPZ  = HERE / "{base}.npz"

def main():
    os.chdir(HERE)
    data = np.load(NPZ)
{binds}

    # ---- begin captured plotting cell ----
{textwrap.indent(cell_src.strip(), "    ")}
    # ---- end captured plotting cell ----

if __name__ == "__main__":
    main()
'''
    (root / f"replot_{base}.py").write_text(code)


def mplfreeze(line: str, cell: str):
    """Jupyter magic command to freeze matplotlib plots with data and replot script.

    Captures the current plotting cell, saves specified variables to NPZ format,
    executes the plot, saves the figure in multiple formats, and generates a
    standalone replot script for reproducibility.

    Args:
        line: Magic command line containing name, variable names, and options.
            Format: "name var1 var2 ... [--outdir DIR]"
        cell: The plotting code cell content to execute and capture.

    Example:
        %%mplfreeze trig_demo x_data sine cosine tanh
        with plt.style.context("lusca"):
            fig, axes = plt.subplots(1, 2, figsize=(7.0, 2.6), sharey=True)
            axes[0].plot(x_data, sine); axes[0].plot(x_data, cosine)
            axes[1].plot(sine, tanh, linestyle="--"); axes[1].plot(cosine, tanh, linestyle="--")
            plt.show()  # optional

    Raises:
        RuntimeError: If not running in IPython/Jupyter or no figure found.
    """
    import matplotlib.pyplot as plt
    from IPython import get_ipython
    from matplotlib.figure import Figure

    ip = get_ipython()
    if ip is None:
        raise RuntimeError("%%mplfreeze must run inside IPython/Jupyter.")
    ns = ip.user_ns

    base, varnames, outdir = _parse_line(line)

    # create run folder
    stamp = datetime.now().strftime("%Y%m%d-%H%M%S")
    root = Path(outdir) / f"{base}_{stamp}"
    root.mkdir(parents=True, exist_ok=True)

    # save arrays
    _save_npz(root / f"{base}.npz", ns, varnames)
    logging.info(f"Saved {len(varnames)} arrays → {root / f'{base}.npz'}")

    # run the plotting cell now
    ip.run_cell(cell)

    # snapshot the single figure
    fig = ns.get("fig", None)
    if not isinstance(fig, Figure):
        fig = plt.gcf()
    if not isinstance(fig, Figure):
        raise RuntimeError(
            "[mplfreeze] No Matplotlib Figure found as 'fig' or current figure."
        )
    for ext in ("pdf", "svg", "png"):
        fig.savefig(root / f"{base}.{ext}")
    logging.info(f"Saved figure → {root}/{base}.{{pdf,svg,png}}")

    # write replot script with explicit local bindings
    _write_replot(root, cell, base, varnames)
    logging.info(f"Wrote {root / f'replot_{base}.py'}")
    logging.info(f"Run folder: {root}")


# ---- IPython extension hooks ----
def load_ipython_extension(ip):
    """Load the mplfreeze magic command into IPython.

    Args:
        ip: The IPython instance to register the magic command with.
    """
    mgr = ip.magics_manager.magics
    if "cell" in mgr and "mplfreeze" in mgr["cell"]:
        del mgr["cell"]["mplfreeze"]
    ip.register_magic_function(mplfreeze, magic_kind="cell", magic_name="mplfreeze")


def unload_ipython_extension(ip):
    """Unload the mplfreeze magic command from IPython.

    Args:
        ip: The IPython instance to unregister the magic command from.
    """
    mgr = ip.magics_manager.magics
    if "cell" in mgr and "mplfreeze" in mgr["cell"]:
        del mgr["cell"]["mplfreeze"]
